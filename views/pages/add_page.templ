
package pages

import (
	"bajetapp/views/component"
	"strconv"
)

templ AddTransaction(csrfToken string, expenseCategory []string, incomeCategory []string) {
	@component.Base() {
		<section class="add-expense">
			<form id="add-expense" method="POST" action="/trx">
				<input type="hidden" name="_csrf" value={ csrfToken }/>
				<label for="description">What ?</label>
				<input style="text-align: right;" type="text" id="description" name="description" required autofocus onfocus="this.setSelectionRange(this.value.length, this.value.length);"/>
				<div style="display: flex; justify-content: space-between;">
					<fieldset id="expense-category" style="flex: 1; margin-right: 10px;">
						<legend>Expense:</legend>
						for idx,item:= range expenseCategory {
							<label for={ "radio-exp-"+strconv.Itoa(idx) } >
								<input type="radio" id={ "radio-exp-"+strconv.Itoa(idx) } name="category" value={ item }/>
								{ item }
							</label>
						}
					</fieldset>
					<fieldset id="income-category" style="flex: 1; margin-left: 10px;">
						<legend>Income:</legend>
						for idx,item:= range incomeCategory {
							<label for={ "radio-inc-"+strconv.Itoa(idx) } >
								<input type="radio" id={ "radio-inc-"+strconv.Itoa(idx) } name="category" value={ item }/>
								{ item }
							</label>
						}
					</fieldset>
				</div>
				<label for="amount">How Much ?</label>
				<fieldset role="group" x-data="{ trx_amount: '', trx_amount_k: '' }" x-init="$watch('trx_amount_k', value => trx_amount = value * 1000)">
					<input
						value="Rp"
						value="Read-only"
						aria-label="Read-only input"
						readonly
						style="width: 15%;"
					/>
					<input x-model="trx_amount_k" step="any" type="number" inputmode="decimal" id="amount_k" name="amount_k" required style="text-align: right;"/>
					<input
						value="K"
						value="Read-only"
						aria-label="Read-only input"
						readonly
						style="width: 15%;"
					/>
					<input  x-model="trx_amount" type="text" id="amount" name="amount" readonly />
						
				</fieldset>

				<div x-data="{ transaction_datetime: '', transaction_at: '' }" x-init="$watch('transaction_datetime', value => transaction_at = value + ':00+07:00')">
					<label for="transaction_shadow_date">When ? (GMT+7)</label>
					<input type="datetime-local" id="transaction_shadow_date"  required x-model="transaction_datetime"/>
					<input hidden type="text" id="transaction_at" name="transaction_at" x-model="transaction_at" readonly/>
				</div>

				<button type="submit" id="submit_button">Add Expense</button>
				<script>
                    document.addEventListener('DOMContentLoaded', (event) => {
                        const submitButton = document.getElementById('submit-button');
                        const expenseNameInput = document.getElementById('expense-name');
                        const expenseAmountInput = document.getElementById('expense-amount');
                        const expenseDateInput = document.getElementById('transaction_at');

                        const validateForm = () => {
                            const expenseName = expenseNameInput.value.trim();
                            const expenseAmount = parseFloat(expenseAmountInput.value.replace(/[^0-9.-]+/g,""));
                            const expenseDate = new Date(expenseDateInput.value);

                            if (expenseName && expenseAmount > 0 && !isNaN(expenseDate.getTime())) {
                                submitButton.disabled = false;
                            } else {
                                submitButton.disabled = true;
                            }
                        };

                        expenseNameInput.addEventListener('input', validateForm);
                        expenseAmountInput.addEventListener('input', validateForm);
                        expenseDateInput.addEventListener('input', validateForm);

                        validateForm(); // Initial validation
                    });
                </script>
				<script>
                    document.addEventListener('DOMContentLoaded', (event) => {
                        const submitButton = document.getElementById('submit-button');
                        const expenseCategoryFieldset = document.getElementById('expense-category');
                        const incomeCategoryFieldset = document.getElementById('income-category');
                        
                        const updateButtonLabel = () => {
                            const selectedExpense = expenseCategoryFieldset.querySelector('input[name="radio"]:checked');
                            const selectedIncome = incomeCategoryFieldset.querySelector('input[name="radio"]:checked');
                            
                            if (selectedIncome) {
                                submitButton.textContent = 'Add Income';
                            } else if (selectedExpense) {
                                submitButton.textContent = 'Add Expense';
                            }
                        };

                        expenseCategoryFieldset.addEventListener('change', updateButtonLabel);
                        incomeCategoryFieldset.addEventListener('change', updateButtonLabel);
                    });
                </script>
			</form>
		</section>
	}
}
